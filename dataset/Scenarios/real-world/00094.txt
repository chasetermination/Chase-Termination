%Deterministic dependencies
rdfs:subClassOf(X,Y) :- oil:sameClassAs(X,Y)
rdfs:subPropertyOf(X,Y) :- oil:samePropertyAs(X,Y)
:Param(Y) :- :output(X,Y)
:ExtensibleDocumented(X) :- :Service(X)
oil:List(Y) :- oil:intersectionOf(X,Y)
!Ex0 :type(X,Ex0),owl:Thing(Ex0) :- :Binding(X)
owl:Restriction(X) :- oil:minCardinality(X,Y)
owl:Restriction(X) :- oil:maxCardinalityQ(X,Y)
:ParamFault(X) :- :Param(X)
:Documentation(Y) :- :documentation(X,Y)
owl:ObjectProperty(X) :- oil:inverseOf(X,Y)
rdfs:Class(Y) :- rdfs:domain(X,Y)
:Fault(Y) :- :fault(X,Y)
owl:Restriction(X) :- oil:maxCardinality(X,Y)
:Service(X) :- :port(X,Y)
rdf:Seq(X) :- oil:List(X)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :Message(X)
owl:Restriction(X) :- oil:cardinality(X,Y)
XMLSchema:anyURI(Y) :- :targetNamespace(X,Y)
owl:Class(X) :- oil:disjointUnionOf(X,Y)
!Ex0 :paramMessage(X,Ex0),owl:Thing(Ex0) :- :ParamFault(X)
:BindingOperation(Y) :- :bindingOperation(X,Y)
rdf:Property(X) :- rdfs:domain(X,Y)
rdfs:Class(X) :- oil:Datatype(X)
XMLSchema:anyURI(Y) :- :location(X,Y)
:BindingOperationFault(Y) :- :bindingFault(X,Y)
rdf:Property(Y) :- oil:onProperty(X,Y)

owl:Restriction(X) :- oil:toClass(X,Y)
:BindingOperationMessage(Y) :- :bindingInput(X,Y)
:Operation(X) :- :output(X,Y)
rdf:Property(X) :- oil:UniqueProperty(X)
:Documented(X) :- :name(X,Y)
:Definitions(X) :- :types(X,Y)
:Operation(X) :- :RequestResponseOperation(X)
:ExtensibleDocumented(X) :- :Binding(X)
rdfs:Class(Y) :- oil:toClass(X,Y)
Y1 == Y2 :- :OneWayOperation(X), :input(X,Y1), :input(X,Y2)
!Ex0 :input(X,Ex0),owl:Thing(Ex0) :- :OneWayOperation(X)
:Operation(X) :- :NotificationOperation(X)
Y1 == Y2 :- :Port(X), :binding(X,Y1), :binding(X,Y2)
!Ex0 :binding(X,Ex0),owl:Thing(Ex0) :- :Port(X)
:Operation(X) :- :SolicitResponseOperation(X)
rdfs:Resource(X) :- rdfs:member(X,Y)
owl:ObjectProperty(X) :- oil:UnambiguousProperty(X)
:BindingOperation(X) :- :bindingInput(X,Y)
rdfs:Class(X) :- rdfs:subClassOf(X,Y)
:Definitions(X) :- :binding(X,Y)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :PortType(X)
XMLSchema:NCName(Y) :- :name(X,Y)
:ExtensibleAttributesDocumented(X) :- :ParamFault(X)
:Documented(X) :- :documentation(X,Y)
:Definitions(X) :- :portType(X,Y)
rdfs:Literal(X) :- :Documentation(X)
Y1 == Y2 :- :Port(X), :name(X,Y1), :name(X,Y2)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :Port(X)
rdfs:Class(Y) :- rdfs:range(X,Y)
:Part(Y) :- :part(X,Y)
:Port(Y) :- :port(X,Y)
rdfs:Resource(X) :- rdfs:Class(X)
:ExtensibleDocumented(X) :- :Message(X)
:ExtensibleAttributesDocumented(X) :- :Part(X)
:Types(Y) :- :partType(X,Y)
:Documented(X) :- :ExtensibleAttributesDocumented(X)
:Operation(X) :- :fault(X,Y)
:Import(X) :- :location(X,Y)
owl:Class(Y) :- oil:sameClassAs(X,Y)
owl:Restriction(X) :- oil:minCardinalityQ(X,Y)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :Part(X)
rdfs:Resource(X) :- rdfs:Container(X)
owl:ObjectProperty(X) :- oil:TransitiveProperty(X)
:Message(Y) :- :paramMessage(X,Y)
:Operation(X) :- :input(X,Y)
rdf:Property(X) :- rdfs:subPropertyOf(X,Y)
rdfs:Class(X) :- oil:Class(X)
owl:Class(X) :- oil:disjointWith(X,Y)
!Ex0 :namespace(X,Ex0),owl:Thing(Ex0) :- :Import(X)
:ParamFault(X) :- :paramMessage(X,Y)
:Definitions(X) :- :import(X,Y)
rdf:Property(X) :- rdfs:ContainerMembershipProperty(X)
:BindingOperationMessage(Y) :- :bindingOutput(X,Y)
owl:Class(X) :- oil:complementOf(X,Y)
:Part(X) :- :partType(X,Y)
rdf:Property(X) :- oil:DatatypeProperty(X)
oil:List(X) :- oil:rest(X,Y)
:Import(X) :- :namespace(X,Y)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :Fault(X)
:ExtensibleDocumented(X) :- :Operation(X)
owl:ObjectProperty(Y) :- oil:inverseOf(X,Y)
:ExtensibleDocumented(X) :- :BindingOperation(X)
XMLSchema:nonNegativeInteger(Y) :- oil:cardinalityQ(X,Y)
oil:List(Y) :- oil:disjointUnionOf(X,Y)
:Definitions(X) :- :message(X,Y)
:ParamFault(X) :- :Fault(X)
:ExtensibleDocumented(X) :- :Definitions(X)
:BindingOperation(X) :- :bindingFault(X,Y)
:PortType(Y) :- :type(X,Y)
:Message(Y) :- :message(X,Y)
:ExtensibleDocumented(X) :- :Port(X)
rdf:Property(X) :- rdfs:range(X,Y)
:PortType(X) :- :operation(X,Y)
:ExtensibleDocumented(X) :- :BindingOperationMessage(X)
:Definitions(Y) :- :definition(X,Y)
:PortType(Y) :- :portType(X,Y)
XMLSchema:nonNegativeInteger(Y) :- oil:minCardinalityQ(X,Y)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :Binding(X)
:Part(X) :- :partElement(X,Y)
:Documented(X) :- :ExtensibleDocumented(X)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :BindingOperation(X)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :BindingOperationFault(X)
oil:List(Y) :- oil:unionOf(X,Y)
:ExtensibleDocumented(X) :- :BindingOperationFault(X)
rdfs:Class(Y) :- rdfs:subClassOf(X,Y)
:Port(X) :- :portBinding(X,Y)
rdfs:Resource(Y) :- rdfs:member(X,Y)
:ExtensibleDocumented(X) :- :Types(X)
:Param(Y) :- :input(X,Y)
owl:Class(X) :- oil:oneOf(X,Y)
rdfs:Class(Y) :- oil:hasClassQ(X,Y)
rdf:Property(X) :- oil:ObjectProperty(X)
owl:Restriction(X) :- oil:cardinalityQ(X,Y)
:Definitions(X) :- :targetNamespace(X,Y)
:ExtensibleAttributesDocumented(X) :- :PortType(X)
XMLSchema:anyURI(Y) :- :namespace(X,Y)
oil:List(Y) :- oil:rest(X,Y)
owl:Restriction(X) :- oil:hasClassQ(X,Y)
:Definitions(X) :- :service(X,Y)
XMLSchema:nonNegativeInteger(Y) :- oil:minCardinality(X,Y)
XMLSchema:nonNegativeInteger(Y) :- oil:maxCardinalityQ(X,Y)
:Binding(X) :- :bindingOperation(X,Y)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :Service(X)
rdfs:Class(Y) :- oil:hasClass(X,Y)
rdfs:Resource(X) :- rdfs:Literal(X)
owl:Class(X) :- oil:unionOf(X,Y)
:Types(Y) :- :types(X,Y)
!Ex0 :location(X,Ex0),owl:Thing(Ex0) :- :Import(X)
rdfs:Class(X) :- rdfs:Datatype(X)
:BindingOperation(X) :- :bindingOutput(X,Y)
:Operation(Y) :- :operation(X,Y)
XMLSchema:nonNegativeInteger(Y) :- oil:cardinality(X,Y)
oil:List(Y) :- oil:oneOf(X,Y)
owl:Restriction(X) :- oil:hasClass(X,Y)
owl:Restriction(X) :- oil:onProperty(X,Y)
owl:Class(Y) :- oil:complementOf(X,Y)
:ExtensibleAttributesDocumented(X) :- :Import(X)
owl:Class(Y) :- oil:disjointWith(X,Y)
rdf:Property(Y) :- rdfs:subPropertyOf(X,Y)
:Binding(Y) :- :portBinding(X,Y)
XMLSchema:nonNegativeInteger(Y) :- oil:maxCardinality(X,Y)
owl:Class(X) :- oil:intersectionOf(X,Y)
:Message(X) :- :part(X,Y)
:WSDLDOC(X) :- :definition(X,Y)
:Binding(Y) :- :binding(X,Y)
owl:Class(X) :- oil:Restriction(X)
:Operation(X) :- :OneWayOperation(X)
:Import(Y) :- :import(X,Y)
owl:Class(X) :- oil:sameClassAs(X,Y)
:Service(Y) :- :service(X,Y)
!Ex0 :name(X,Ex0),owl:Thing(Ex0) :- :Operation(X)
Y1 == Y2 :- :NotificationOperation(X), :output(X,Y1), :output(X,Y2)
!Ex0 :output(X,Ex0),owl:Thing(Ex0) :- :NotificationOperation(X)
:Binding(X) :- :type(X,Y)
%Disjunctive dependencies
